{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { map, finalize, catchError } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nconsole.log('API URL:', environment.apiUrl);\nconsole.log('Base URL:', baseUrl);\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.accountSubject = new BehaviorSubject(null);\n      this.account = this.accountSubject.asObservable();\n      this.loadingSubject = new BehaviorSubject(false);\n      this.loading = this.loadingSubject.asObservable();\n      // Initialize loading state\n      this.loadingSubject.next(false);\n    }\n    get accountValue() {\n      return this.accountSubject.value;\n    }\n    login(email, password) {\n      this.loadingSubject.next(true);\n      console.log('Attempting login with:', {\n        email\n      });\n      return this.http.post(`${baseUrl}/authenticate`, {\n        email,\n        password\n      }, {\n        withCredentials: true,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).pipe(map(account => {\n        console.log('Login successful:', account);\n        this.accountSubject.next(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }), catchError(error => {\n        console.error('Login error:', error);\n        return this.handleError(error);\n      }), finalize(() => {\n        console.log('Login request completed');\n        this.loadingSubject.next(false);\n      }));\n    }\n    logout() {\n      this.loadingSubject.next(true);\n      console.log('Logging out...');\n      this.http.post(`${baseUrl}/revoke-token`, {}, {\n        withCredentials: true\n      }).pipe(catchError(error => {\n        console.error('Logout error:', error);\n        return this.handleError(error);\n      }), finalize(() => {\n        console.log('Logout completed');\n        this.loadingSubject.next(false);\n        this.stopRefreshTokenTimer();\n        this.accountSubject.next(null);\n        this.router.navigate(['/account/login']);\n      })).subscribe();\n    }\n    refreshToken() {\n      this.loadingSubject.next(true);\n      console.log('Refreshing token...');\n      return this.http.post(`${baseUrl}/refresh-token`, {}, {\n        withCredentials: true\n      }).pipe(map(account => {\n        console.log('Token refresh successful:', account);\n        this.accountSubject.next(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }), catchError(error => {\n        console.error('Token refresh error:', error);\n        return this.handleError(error);\n      }), finalize(() => {\n        console.log('Token refresh completed');\n        this.loadingSubject.next(false);\n      }));\n    }\n    handleError(error) {\n      console.error('API Error:', error);\n      let errorMessage = 'An error occurred';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = error.error.message;\n      } else {\n        // Server-side error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n      console.error('Error details:', {\n        status: error.status,\n        statusText: error.statusText,\n        url: error.url,\n        message: errorMessage\n      });\n      return throwError(() => error);\n    }\n    register(account) {\n      return this.http.post(`${baseUrl}/register`, account);\n    }\n    verifyEmail(token) {\n      return this.http.post(`${baseUrl}/verify-email`, {\n        token\n      });\n    }\n    forgotPassword(email) {\n      return this.http.post(`${baseUrl}/forgot-password`, {\n        email\n      });\n    }\n    validateResetToken(token) {\n      return this.http.post(`${baseUrl}/validate-reset-token`, {\n        token\n      });\n    }\n    resetPassword(token, password, confirmPassword) {\n      return this.http.post(`${baseUrl}/reset-password`, {\n        token,\n        password,\n        confirmPassword\n      });\n    }\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(account => {\n        // update the current account if it was updated\n        if (this.accountValue && account.id === this.accountValue.id) {\n          // publish updated account to subscribers\n          account = {\n            ...this.accountValue,\n            ...account\n          };\n          this.accountSubject.next(account);\n        }\n        return account;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(finalize(() => {\n        // auto logout if the logged in account was deleted\n        if (this.accountValue && id === this.accountValue.id) this.logout();\n      }));\n    }\n    startRefreshTokenTimer() {\n      if (!this.accountValue?.jwtToken) return;\n      // parse json object from base64 encoded jwt token\n      const jwtToken = JSON.parse(atob(this.accountValue.jwtToken.split('.')[1]));\n      // set a timeout to refresh the token a minute before it expires\n      const expires = new Date(jwtToken.exp * 1000);\n      const timeout = expires.getTime() - Date.now() - 60 * 1000;\n      this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n    }\n    stopRefreshTokenTimer() {\n      clearTimeout(this.refreshTokenTimeout);\n    }\n    static #_ = this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}